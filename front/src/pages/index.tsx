import Head from "next/head";
import styles from "@/styles/Home.module.css";
import Link from "next/link";
import { Article } from "@/types";
import { GetStaticProps } from "next";
import { useRouter } from "next/router";
import { useState } from "react";
// @ts-ignore
import axios from "axios";

type Props = {
  articles: Article[];
};

// ISRで記事一覧を取得する
export const getStaticProps: GetStaticProps<Props> = async () => {
  // console.log(process.env.NEXT_PUBLIC_API_ENDPOINT); // しっかり環境変数が渡せているかチェック
  // console.log(process.env.NEXT_IP_ENDPOINT);
  const res = await fetch(`${process.env.NEXT_PUBLIC_API_ENDPOINT}/v1`);
  const data = await res.json();
  const articles: Article[] = data.articles; // レスポンスのdataをprops経由でページに渡す

  // レスポンスがない場合(getStaticPropsが取得したデータがないとき)は空の配列を返す
  if (!articles) {
    data.articles = [];
  }

  // console.log(data.articles);
  return {
    props: {
      articles,
    },
    revalidate: 60 * 60, // 1時間ごとに再生成
  };
};

export default function Home({ articles: initialArticles }: Props) {
  const router = useRouter();

  const handleUpdate = async (article: Article) => {
    router.push(`/articles/edit/${article.slug}`);
  };

  // 遷移せずに記事削除する
  const [articles, setArticles] = useState(initialArticles);

  // 削除ボタンを押した時の処理
  const handleDelete = async (article: Article) => {
    console.log(
      `${process.env.NEXT_PUBLIC_IP_ENDPOINT}/v1/articles/${article.slug}`
    );
    console.log("NEXT_IP_ENDPOINT:", process.env.NEXT_PUBLIC_IP_ENDPOINT);
    if (confirm("削除しますか？")) {
      try {
        await axios.delete(
          `${process.env.NEXT_PUBLIC_IP_ENDPOINT}/v1/articles/${article.slug}`
        );
        setArticles(articles.filter((a) => a.slug !== article.slug));
      } catch (error) {
        alert("削除に失敗しました");
      }
    }
  };

  return (
    <>
      <Head>
        <title>RealWorld</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.container}>
        <h1>記事一覧ページ</h1>
        <Link href="/articles/new" className={styles.createButton}>
          新規登録する
        </Link>
        {articles.length > 0 ? (
          articles.map((article: Article) => (
            <div key={article.id} className={styles.articleCard}>
              <Link
                href={`/articles/${article.slug}`}
                className={styles.articleCardBox}
              >
                <h2>{article.title}</h2>
              </Link>
              <p>{article.description}</p>
              <p className={styles.date}>{article.createdAt}</p>
              <button
                className={styles.editButton}
                onClick={() => handleUpdate(article)}
              >
                Edit
              </button>
              <button
                className={styles.deleteButton}
                onClick={() => handleDelete(article)}
              >
                Delete
              </button>
            </div>
          ))
        ) : (
          <h1>ただいま記事がありません</h1>
        )}
      </div>
    </>
  );
}
